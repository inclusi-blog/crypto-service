// Code generated by MockGen. DO NOT EDIT.
// Source: service/crypto_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	response "crypto-service/models/response"
	gin "github.com/gin-gonic/gin"
	golaerror "github.com/gola-glitch/gola-utils/golaerror"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCryptoService is a mock of CryptoService interface
type MockCryptoService struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoServiceMockRecorder
}

// MockCryptoServiceMockRecorder is the mock recorder for MockCryptoService
type MockCryptoServiceMockRecorder struct {
	mock *MockCryptoService
}

// NewMockCryptoService creates a new mock instance
func NewMockCryptoService(ctrl *gomock.Controller) *MockCryptoService {
	mock := &MockCryptoService{ctrl: ctrl}
	mock.recorder = &MockCryptoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCryptoService) EXPECT() *MockCryptoServiceMockRecorder {
	return m.recorder
}

// Decrypt mocks base method
func (m *MockCryptoService) Decrypt(ctx *gin.Context, request string) (response.DecryptResponse, *golaerror.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", ctx, request)
	ret0, _ := ret[0].(response.DecryptResponse)
	ret1, _ := ret[1].(*golaerror.Error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt
func (mr *MockCryptoServiceMockRecorder) Decrypt(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockCryptoService)(nil).Decrypt), ctx, request)
}
